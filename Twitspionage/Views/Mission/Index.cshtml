@using Twitspionage.Models
@model Twitspionage.Models.MysteryDetail
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm())
{
    <div id="blurb">
        <h5>How to play</h5>
        <p>Create a mission name and begin thinking of your clues. The other players will be trying work out the special message you have split amongst each of your locations. The clue should point them to the next location in the list. Think about the ordering and how your friends will work each location out. But don't worry, to everyone else you are just posting scenic images to Twitter.</p>
    </div>
    <h3>Create a Mission</h3>
    <div id="mystery">
        @Html.AntiForgeryToken()

        <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
            @Html.TextBoxFor(model => model.Name, new {@class = "mdl-textfield__input"})
            @Html.LabelFor(model => model.Name, new {@class = "mdl-textfield__label"})
        </div>

        <div class="mdl-textfield">
            <input class="mdl-textfield__input" type="text" id="clue" readonly="readonly">
            <label class="mdl-textfield__label" for="clue">Complete answer (from each clue)</label>
        </div>

        @foreach (var clueDetail in Model.Clues)
        {
            Html.RenderPartial("_Clue", clueDetail);
        }
    </div>

    <span id="error" class="mdl-chip" style="display: none;">
        <span class="mdl-chip__text">@ViewBag.Error</span>
        <button type="button" class="mdl-chip__action"><i class="material-icons">cancel</i></button>
    </span>
    <br/>

    @Html.ActionLink("Add Clue", "NewClueDetail", null, new { id = "addItem", @class = "mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--colored" })
    
    <button class="mdl-button mdl-js-button mdl-button--fab mdl-js-ripple-effect mdl-button--colored submit">
        <i class="material-icons">send</i>
    </button>
}
<div class="mdl-progress mdl-js-progress mdl-progress__indeterminate" style="display: none;"></div>

<script type="text/javascript">
    $(function () {
        var currentLat, currentLon;
        if (navigator != null && navigator.geolocation != null) {
            navigator.geolocation.getCurrentPosition(function(position) {
                    currentLat = position.coords.latitude;
                    currentLon = position.coords.longitude;
                    setupFields();
                },
                function(position) {
                    console.log('Error getting location: ' + position.code);
                });
        }
        $("#addItem")
            .click(function() {
                $.ajax({
                    url: this.href,
                    cache: false,
                    success: function (html) {
                        $("#mystery").append(html);
                        setupFields();
                    }
                });
                return false;
            });

        $('.submit').click(function() {
            $('.mdl-progress').show();
            $('form').submit();
            $('form').hide();
        });

        function setupFields() {
            var deleteButtons = $(".deleteRow");
            deleteButtons.length > 1 ? deleteButtons.show() : deleteButtons.hide();
            deleteButtons
                .click(function() {
                    $(this).parents("fieldset:first").remove();
                    setupFields();
                    return false;
                });
            var error = $('.mdl-chip__text').html();
            if (error != null && error !== '') {
                $('#error').show();
                $('button, input, a').click(function () {
                    $('#error').hide();
                    $('#error').html('');
                });
            }
            var clueTitles = $('#mystery h4');
            clueTitles.each(function(key, value) {
                $(value).text('Clue ' + (key + 1));
            });

            var clues = $('.msg');
            clues.change(mergeClues);

            function mergeClues() {
                var clue = $('#clue');
                clue.val('');
                clues.each(function (key, value) {
                    clue.val(clue.val() + " " + $(value).val().toLowerCase());
                });
                var classes = 'is-upgraded is-dirty mdl-textfield--floating-label';
                if (clue.val() == null || clue.val().trim() === '') {
                    clue.parent().removeClass(classes);
                } else {
                    clue.parent().addClass(classes);
                }
            }

            if (componentHandler != null) {
                componentHandler.upgradeAllRegistered();
            }

            var maps = $('.map');
            maps.each(function (key, value) {
                var lat = $(value).parent('fieldset').find('.lat');
                var lon = $(value).parent('fieldset').find('.lon');
                var mapElem = $(value).html();
                if (mapElem == null || mapElem.trim() === '') {
                    createMap();
                }
                lat.change(createMap);
                lon.change(createMap);
                function createMap() {
                    var latitude = lat.val() != null && lat.val() !== '' ? lat.val() : currentLat;
                    var longitude = lon.val() != null && lon.val() !== '' ? lon.val() : currentLon;
                    success({ lat: latitude, lon: longitude });
                    $(value).googleMap({
                        coords: [latitude, longitude],
                        zoom: 16
                    });
                    $(value).addMarker({
                        coords: [latitude, longitude],
                        draggable: true,
                        success: success
                    });
                    function success(e) {
                        lat[0].parentNode.MaterialTextfield.change(e.lat);
                        lon[0].parentNode.MaterialTextfield.change(e.lon);

                        if (componentHandler != null) {
                            componentHandler.upgradeAllRegistered();
                        }
                    }
                }
            });
        }
    });
</script>